// Mouse, VGA and IR Initialisation

//**************************************//
// VGA Grid Initialisation

@0x00	0x01	// Store 0 in b for y coord
@0x01	0x00
@0x02	0x03	// Store y coord in RAM
@0x03	0x01
@0x04	0x03	// Send y to VGA
@0x05	0xB1
@0x06	0x00	// Store 0 in a for x coord
@0x07	0x00
@0x08	0x02	// Send x coord to VGA
@0x09	0xB0
@0x0A 	0x02	// Store x coord in RAM
@0x0B	0x09
@0x0C	0x01	// Load y coord to b
@0x0D	0x01
@0x0E	0x00	// Load 39 to a
@0x0F	0x07
@0x10	0x96	// if Y Coord == 39
@0x11	0x37	// [Line 56]
@0x12	0x00	// Load 79 to Reg A
@0x13	0x08
@0x14	0x96	// if Y Coord == 79
@0x15	0x37	// [Line 56]
@0x16	0x00	// Load X Coord
@0x17	0x09
@0x18	0x01	// Load 52 in Reg B
@0x19	0x02
@0x1A	0x96	// if X Coord == 52
@0x1B	0x27	// ADDRESS [incrementing x] [line 40]
@0x1C	0x01	// Load 106 in b
@0x1D	0x03
@0x1E	0x96	// if X Coord == 106
@0x1F	0x27	// ADDRESS [incrementing x] [line 40]
@0x20	0x01	// Load 160 in b
@0X21	0x04
@0x22	0xA6	// if X Coord > 160
@0x23	0x2E	// ADDRESS [incrementing y] [line 47]
@0x24	0x54	// Increase X
@0x25	0x07	// GO TO checking C Coord
@0x26	0x08
@0x27	0x01	// Load 1 for pixel
@0x28	0x05
@0x29	0x03	// Send pixel to VGA
@0x2A	0xB2	
@0x2B	0x54	// Increment X
@0x2C	0x07	// GO TO - Checking X Coord
@0x2D	0x08	// [line 8]
@0x2E	0x01	// Load Y Coord to Reg B
@0x2F	0x01
@0x30	0x65	// Y Coord +1 [stored in Reg B]
@0x31	0x00	// Load 120 to Reg A
@0x32	0x06
@0x33	0xB6	// 120 < Y Coord
@0x34	0x3F	// Finishing Writing Grid -- Go to Start of Mouse Interrupt
@0x35	0x07	// GO TO -store y coord
@0x36	0x02
@0x37	0x01	// Load 1 for Pixel
@0x38	0x05
@0x39	0x03	// Send to VGA
@0x3A	0xB2
@0x3B	0x00	// Load X coord
@0x3C	0x09
@0x3D	0x07	// G0 TO check x<160
@0x3E	0x20	//


//*****************************************//
// Mouse Initialisation

// Write Status Byte to LEDs
@0x3F   0x00 
@0x40   0xA0 	// Read Value of Mouse Status into Reg A
@0x41   0x02 
@0x42   0xC0	// Write Value of Reg A to LED Base Address
@0x43	0x02
@0x44	0x18	// Stored Status Byte in RAM 0x18

// Write Scroll Wheel to LEDs and Colour
@0x43   0x00 
@0x44   0xA3 	// Read Value of Mouse Scroll Wheel into Reg A
@0x45   0x02 
@0x46   0xC1	// Write Value of Reg A to LED Upper Address
@0x47	0x02
@0x48	0xB3	// Write Value of Reg A to VGA Colour
@0x49	0x02	
@0x4A	0x1B	// Stores Scroll Wheel Location in RAM 0x1B

// Delete Previous Cursor Position
@0x49   0x00 
@0x4A   0x19	// Read Old Mouse X Position from RAM into Reg A
@0x4B   0x01 
@0x4C   0x1A	// Read Old Mouse Y Position from RAM into Reg B
@0x4D   0x02 
@0x4E   0xB0	// Write Value of Reg A to VGA X Coordinate
@0x4F	0x03 
@0x50	0xB1	// Write Value of Reg B to VGA Y Coordinate
@0x51   0x00 
@0x52   0x00	// Read "0" from RAM into Reg A
@0x53   0x02 
@0x54   0xB2	// Write Value of Reg A to VGA Pixel

// Write New Cursor Position to VGA
@0x55   0x00 	
@0x56   0xA1	// Read Value of Live Mouse X Position into Reg A
@0x57   0x01 
@0x58   0xA2	// Read Value of Live Mouse Y Position into Reg B
@0x59   0x02 
@0x5A   0xD0	// Write Value of Reg A to 7 Segment (Lower Digits)
@0x5B   0x03 
@0x5C   0xD1	// Write Value of Reg B to 7 Segment (Upper Digits)

@0x5D   0x02 
@0x5E   0xB0	// Write Value of Reg A to VGA X Coordinate
@0x5F   0x03 
@0x60   0xB1	// Write Value of Reg B to VGA Y Coordinate

@0x61   0x02 
@0x62   0x19	// Write Value of Reg A to RAM Address
@0x63   0x03 
@0x64   0x1A	// Write Value of Reg B to RAM Address

@0x65   0x00 	
@0x66   0x05	// Read "1" from RAM into Reg A
@0x67   0x02 	
@0x68   0xB2	// Write value of Reg A to VGA Pixel

@0x69	0x07
@0x6A	0x70	// Jump to Update IR Command


//***************************************//
// Update Command 
@0x70	0x00	// Load "Mouse Y" to
@0x71	0x1A	// Reg A

@0x72	0x01	// Load "40" into
@0x73	0x72	// Reg B	

@0x74	0xB6	// If Y < 40
@0x75	0x7C 	// Jump to "Upper X Scan"

@0x76	0x01	// Else Load "80" to
@0x77	0x73	// Reg B

@0x78	0xB6	// If Y < 80
@0x79	0xCD	// Jump to [Set to command none]

@0x7A	0x07	// Else Jump to
@0x7B	0x8A	// Jump to "Lower X Scan"


// Upper X Scan
@0x7C	0x00	// Load "Mouse X Byte" to 
@0x7D	0x19	// Reg A

@0x7E	0x01	// Load "60" to 
@0x7F	0x74	// Reg B

@0x80	0xB6	// If "Mouse X Byte" < "60" 
@0x81	0xE0	// Go to [Command 2]

@0x82	0x07	// Else, Load "120" to 
@0x83	0x84	// Reg B

@0x84	0x01	// Else, Load "120" to 
@0x85	0x75	// Reg B

@0x86	0xB6	// If "Mouse X Byte < "120"
@0x87	0xD3	// Go to [Command 0]
	
@0x88	0x07	// Else jump to
@0x89	0xEC	// [Command 4]


// Lower X Scan
@0x8A	0x00	// Load "Mouse X Byte" to 
@0x8B	0x19	// Reg A

@0x8C	0x01	// Load "60" to 
@0x8D	0x74	// Reg B

@0x8E	0xB6	// If "Mouse X Byte" < "60" 
@0x8F	0xF2	// Go to [Command 5]

@0x90	0x07	// Else, Load "120" to 
@0x91	0x92	// Reg B

@0x92	0x01	// Else, Load "120" to 
@0x93	0x75	// Reg B

@0x94	0xB6	// If "Mouse X Byte < "120"
@0x95	0xF8	// Go to [Command 1]
	
@0x96	0x07	// Else jump to
@0x97	0xE6	// [Command 3]


//***************************************//
// Update Can Send - Timer Interrupt

@0x98	0x00 	// 
@0x99	0x18 	// Load Mouse Status Byte to Reg A

// Shift 7 Bits to the left
@0x9A	0x34	// 0000 0010
@0x9B	0x34	// 0000 0100
@0x9C	0x34	// 0000 1000
@0x9D	0x34	// 0001 0000
@0x9E	0x34	// 0010 0000
@0x9F	0x34	// 0100 0000
@0xA0	0x34	// 1000 0000

@0xA1	0x01 	//
@0xA2	0x76 	// Load "1000 0000" to Reg B

@0xA3	0x96 	// If Left Mouse == 1
@0xA4	0xC6 	// Jump to Send Command

@0xA5	0x07 	// Else 
@0xA6	0xCC 	// Jump to Idle



//***************************************//
// Update Command LEDs

@0xA8	0x03 	// Store Reg B to 
@0xA9	0xC2	// IR to LEDs

@0xAA	0x07 	// 
@0xAB	0xAC	// Jump to [Send Command] 



//***************************************//
// Update Car Colour
@0xAC	0x01 	// 
@0xAD	0x13 	// Load Current Right Down to Reg B

@0xAE	0x03 	// 
@0xAF	0x14 	// Save Current Right Down to Previous Right Down

// Get new Current Right Down
@0xB1	0x00 	// 
@0xB2	0x18 	// Load Mouse Status Byte to Reg A

// Shift 6 Bits to the left
@0xB3	0x34	// 0000 0100
@0xB4	0x34	// 0000 1000
@0xB5	0x34	// 0001 0000
@0xB6	0x34	// 0010 0000
@0xB7	0x34	// 0100 0000
@0xB8	0x34	// 1000 0000

@0xB9	0xA6 	// If Current Right Down > Previous Right Down (Reg A > Reg B)
@0xBA	0x98 	// Go to Change Car

@0xBB	0x07 	// Else
@0xBC	0xCC 	// Jump to Idle


//***************************************//
// Update Car Colour
@0xBD	0x00 	// 
@0xBE	0x11 	// Load Current Colour to Reg A

@0xBF	0x54	// Increment Colour by +1

@0xC0	0x02	//
@0xC1	0x11	// Write new colour to Current Colour

@0xC2	0x02	//
@0xC3	0x91	// Write new colour to IR Transmitter

@0xC4	0x07	// Go to Idle
@0xC5	0xCC	// Go to Idle


//***************************************//
// From Timer Interrupt Pipeline - Sends pulse from IR LED

@0xC6	0x00 	// Load current IR command to
@0xC7	0x10 	// Reg A

@0xC8	0x02 	// Store Reg A to 
@0xC9	0x90 	// IR send command (starts sending pulses from IR LED)

@0xCA	0x07	// Go to Idle 
@0xCB	0xCC	// Go to Idle 


//***************************************//
@0xCC	0x08	// GOTO Idle Trigger


//***************************************//
// IR Commands -----------------------------------
// Set to command None -- 0xCD -> 0xD2 --------------------	
@0xCD	0x01 	// Load command none to  
@0xCE	0x26 	// Reg B

@0xCF	0x03 	// Store Reg B to
@0xD0	0x10 	// Current command

@0xD1	0x07	// Jump to 
@0xD2	0xA8	// [Update Command LEDs]

// Set to command 0 -- 0xD3 -> 0xD8------------------------	
@0xD3	0x01 	// Load command 0 to  
@0xD4	0x20 	// Reg B

@0xD5	0x03 	// Store Reg B to
@0xD6	0x10 	// Current command

@0xD7	0x07	// Jump to 
@0xD8	0xA8	// [Update Command LEDs]

// Set to command 1 -- 0xF8 -> 0xFD ----------------------- (Had to Change Addresses Here)	
@0xF8	0x01 	// Load command 1 to  
@0xF9	0x21 	// Reg B

@0xFA	0x03 	// Store Reg B to
@0xFB	0x10 	// Current command

@0xFC	0x07	// Jump to 
@0xFD	0xA8	// [Update Command LEDs]

// Set to command 2 -- 0xE0 -> 0xE5 -----------------------	
@0xE0	0x01 	// Load command 2 to  
@0xE1	0x22 	// Reg B

@0xE2	0x03 	// Store Reg B to
@0xE3	0x10 	// Current command

@0xE4	0x07	// Jump to 
@0xE5	0xA8	// [Update Command LEDs]

// Set to command 3 -- 0xE6 -> 0xEB -----------------------
@0xE6	0x01 	// Load command 3 to
@0xE7	0x23 	// Reg B

@0xE8	0x03 	// Store Reg B to
@0xE9	0x10  	// Current command

@0xEA	0x07	// Jump to 
@0xEB	0xA8	// [Update Command LEDs]

// Set to command 4 -- 0xEC -> 0xF1 -----------------------
@0xEC	0x01 	// Load command 4 to  
@0xED	0x24 	// Reg B

@0xEE	0x03 	// Store Reg B to
@0xEF	0x10  	// Current command

@0xF0	0x07	// Jump to 
@0xF1	0xA8	// [Update Command LEDs]

// Set to command 5 -- 0xF2 -> 0xF7 -----------------------

@0xF2	0x01 	// Load command 5 to  
@0xF3	0x25 	// Reg B

@0xF4	0x03 	// Store Reg B to
@0xF5	0x10  	// Current command

@0xF6	0x07	// Jump to 
@0xF7	0xA8	// [Update Command LEDs]


//***************************************//
// Interrupts

@0xFE	0x98 // Timer Interrupt sets ROM Address to 0xFE so this jumps us to start of Timer Interrupt Pipeline
@0xFF	0x00 // Mouse Interrupt sets ROM Address to 0xFF so this jumps us to start of Mouse Read