// Full Mouse Demonstration ROM File

//************************************//
// Starts in IDLE State - Interrupt Triggers Pipeline

// Mouse Status Byte
@0x00	0x00	// 
@0x01	0xA0	// Read Status byte of mouse into Reg A

@0x02	0x02	// 
@0x03	0xC0	// Sends 4MSB of Status to 4 Right-most LEDs4

@0x04	0x02	// 
@0x05	0x18	// Stores Status Byte in 0x18



// Mouse X Location Byte
@0x06	0x00	// 
@0x07	0xA1	// Read X Location of mouse into Reg A

@0x08	0x02	// 
@0x09	0xD0	// Sends X Location to 2 Left-most 7-segs

@0x0A	0x02	// 
@0x0B	0x19	// Stores X Location in 0x19


// Mouse Y Location Byte
@0x0C	0x00	// 
@0x0D	0xA2	// Read Y Location of mouse into Reg A

@0x0E	0x02	// 
@0x0F	0xD1	// Sends Y Location to 2 Right-most 7-segs

@0x10	0x02	// 
@0x11	0x1A	// Stores Y Location in 0x1A


// Mouse Z Location Byte
@0x12	0x00	// 
@0x13	0xA3	// Read Z Location of mouse into Reg A

@0x14	0x02	// 
@0x15	0xC1	// Sends Z Location to 8 Left-most LEDs

@0x16	0x02	// 
@0x17	0x1B	// Stores Z Location in 0x1B


@0x18	0x07	// 
@0x19	0x3E	// Jump to Update IR Command






//***************************************//
// Update Command -----------------------------------------
@0x3E	0x00	// Load "Mouse Y" to
@0x3F	0x1A	// Reg A

@0x40	0x01	// Load "40" into
@0x41	0x72	// Reg B	

@0x42	0xB6	// If Y < 40
@0x43	0x50 	// Jump to "Upper X Scan"

@0x44	0x01	// Else Load "80" to
@0x45	0x73	// Reg B

@0x46	0xB6	// If Y < 80
@0x47	0xB4	// Jump to [Set to command none]

@0x48	0x07	// Else Jump to
@0x49	0x60	// Jump to "Lower X Scan"



// Upper X Scan
@0x50	0x00	// Load "Mouse X Byte" to 
@0x51	0x19	// Reg A

@0x52	0x01	// Load "60" to 
@0x53	0x74	// Reg B

@0x54	0xB6	// If "Mouse X Byte" < "60" 
@0x55	0xC6	// Go to [Command 2]

@0x56	0x07	// Else, Load "120" to 
@0x57	0x58	// Reg B

@0x58	0x01	// Else, Load "120" to 
@0x59	0x75	// Reg B

@0x5A	0xB6	// If "Mouse X Byte < "120"
@0x5B	0xBA	// Go to [Command 0]
	
@0x5C	0x07	// Else jump to
@0x5D	0xD2	// [Command 4]


// Lower X Scan
@0x60	0x00	// Load "Mouse X Byte" to 
@0x61	0x19	// Reg A

@0x62	0x01	// Load "60" to 
@0x63	0x74	// Reg B

@0x64	0xB6	// If "Mouse X Byte" < "60" 
@0x65	0xD8	// Go to [Command 5]

@0x66	0x07	// Else, Load "120" to 
@0x67	0x68	// Reg B

@0x68	0x01	// Else, Load "120" to 
@0x69	0x75	// Reg B

@0x6A	0xB6	// If "Mouse X Byte < "120"
@0x6B	0xC0	// Go to [Command 1]
	
@0x6C	0x07	// Else jump to
@0x6D	0xCC	// [Command 3]


//***************************************//
// Update Can Send

@0x70	0x00 	// 
@0x71	0x18 	// Load Mouse Status Byte to Reg A

// Shift 7 Bits to the left
@0x72	0x34	// 0000 0010
@0x73	0x34	// 0000 0100
@0x74	0x34	// 0000 1000
@0x75	0x34	// 0001 0000
@0x76	0x34	// 0010 0000
@0x77	0x34	// 0100 0000
@0x78	0x34	// 1000 0000

@0x79	0x01 	//
@0x7A	0x76 	// Load "1000 0000" to Reg B

@0x7B	0x96 	// If Left Mouse == 1
@0x7C	0xA8 	// Jump to Send Command

@0x7D	0x07 	// Else 
@0x7E	0xB2 	// Jump to Idle



//***************************************//
// Update Command LEDs

@0x82	0x03 	// Store Reg B to 
@0x83	0xC2	// IR to LEDs

@0x84	0x07 	// 
@0x85	0x88	// Jump to [Send Command] 



//***************************************//
// Update Car Colour
@0x88	0x01 	// 
@0x89	0x13 	// Load Current Right Down to Reg B

@0x8A	0x03 	// 
@0x8B	0x14 	// Save Current Right Down to Previous Right Down

// Get new Current Right Down
@0x8C	0x00 	// 
@0x8D	0x18 	// Load Mouse Status Byte to Reg A

// Shift 6 Bits to the left
@0x8E	0x34	// 0000 0100
@0x8F	0x34	// 0000 1000
@0x90	0x34	// 0001 0000
@0x91	0x34	// 0010 0000
@0x92	0x34	// 0100 0000
@0x93	0x34	// 1000 0000

@0x94	0xA6 	// If Current Right Down > Previous Right Down (Reg A > Reg B)
@0x95	0x98 	// Go to Change Car

@0x96	0x07 	// Else
@0x97	0xB2 	// Jump to Idle


//***************************************//
// Update Car Colour
@0x98	0x00 	// 
@0x99	0x11 	// Load Current Colour to Reg A

@0x9A	0x54	// Increment Colour by +1

@0x9B	0x02	//
@0x9C	0x11	// Write new colour to Current Colour

@0x9D	0x02	//
@0x9E	0x91	// Write new colour to IR Transmitter

@0x9F	0x07	// Go to Idle
@0xA0	0xB2	// Go to Idle


//***************************************//
// Timer Interrupt Pipeline - Sends pulse from IR LED

@0xA8	0x00 	// Load current IR command to
@0xA9	0x10 	// Reg A

@0xAA	0x02 	// Store Reg A to 
@0xAB	0x90 	// IR send command (starts sending pulses from IR LED)

@0xAC	0x07	// Go to Idle 
@0xAD	0xB2	// Go to Idle 



//***************************************//
// Interrupts

@0xFE	0x70 // Timer Interrupt sets ROM Address to 0xFE so this jumps us to start of Timer Interrupt Pipeline
@0xFF	0x00 // Mouse Interrupt sets ROM Address to 0xFF so this jumps us to start of Mouse Read


//***************************************//
@0xB2	0x08

// Set Commands ---------------------------------------------------------------
// Set to command None -- 0xB4 -> 0xB9 --------------------	
@0xB4	0x01 	// Load command none to  
@0xB5	0x26 	// Reg B

@0xB6	0x03 	// Store Reg B to
@0xB7	0x10 	// Current command

@0xB8	0x07	// Jump to 
@0xB9	0x82	// [Update Command LEDs]

// Set to command 0 -- 0xBA -> 0xBF------------------------	
@0xBA	0x01 	// Load command 0 to  
@0xBB	0x20 	// Reg B

@0xBC	0x03 	// Store Reg B to
@0xBD	0x10 	// Current command

@0xBE	0x07	// Jump to 
@0xBF	0x82	// [Update Command LEDs]

// Set to command 1 -- 0xC0 -> 0xC5 -----------------------
	
@0xC0	0x01 	// Load command 1 to  
@0xC1	0x21 	// Reg B

@0xC2	0x03 	// Store Reg B to
@0xC3	0x10 	// Current command

@0xC4	0x07	// Jump to 
@0xC5	0x82	// [Update Command LEDs]

// Set to command 2 -- 0xC6 -> 0xCB -----------------------	
@0xC6	0x01 	// Load command 2 to  
@0xC7	0x22 	// Reg B

@0xC8	0x03 	// Store Reg B to
@0xC9	0x10 	// Current command

@0xCA	0x07	// Jump to 
@0xCB	0x82	// [Update Command LEDs]

// Set to command 3 -- 0xCC -> 0xD1 -----------------------
@0xCC	0x01 	// Load command 3 to
@0xCD	0x23 	// Reg B

@0xCE	0x03 	// Store Reg B to
@0xCF	0x10  	// Current command

@0xD0	0x07	// Jump to 
@0xD1	0x82	// [Update Command LEDs]

// Set to command 4 -- 0xD2 -> 0xD7 -----------------------
@0xD2	0x01 	// Load command 4 to  
@0xD3	0x24 	// Reg B

@0xD4	0x03 	// Store Reg B to
@0xD5	0x10  	// Current command

@0xD6	0x07	// Jump to 
@0xD7	0x82	// [Update Command LEDs]

// Set to command 5 -- 0xD8 -> 0xDD -----------------------

@0xD8	0x01 	// Load command 5 to  
@0xD9	0x25 	// Reg B

@0xDA	0x03 	// Store Reg B to
@0xDB	0x10  	// Current command

@0xDC	0x07	// Jump to 
@0xDD	0x82	// [Update Command LEDs]
